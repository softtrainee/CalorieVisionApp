{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Custom Cursor Rules for CalorieVision\
\
- Use MVVM for all features: business logic/state in ViewModels, UI in Views.\
- Use Codable for all models for easy persistence and API parsing.\
- Place all OpenAI API/network code in Services/OpenAIVisionAPI.swift.\
- Use UserDefaults for demo persistence of food history.\
- UI should be minimal, clear, and SwiftUI-native.\
- Make each commit atomic and descriptive, e.g.:  \
    - `feat: implement camera`\
    - `feat: add OpenAI analysis`\
    - `fix: calorie update bug`\
- Use AI tools (Cline/SweetPad/Cursor) for refactor, debugging, and code navigation.\
- All @Published property changes must occur on the main thread.\
- Mock OpenAI API if quota is exhausted, with realistic sample data.\
- Parse OpenAI string responses safely, extracting JSON if needed.\
- All files should be small, focused, and named for their responsibility.}